# Copyright 2025 The OpenXLA Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
name: CPU Benchmarks Presubmit
permissions:
  contents: read
on:
  workflow_dispatch:
    inputs:
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: choice
        required: true
        default: 'yes'
        options:
        - 'yes'
        - 'no'
  pull_request:
  push:
    branches:
      - dev

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.ref != 'main' }}

jobs:
  Tests:
    strategy:
      # Don't fail fast - want to see results for all builds even if one fails.
      fail-fast: false
      matrix:
        job_info: [
          {
            pool: "linux-x86-n2-16",
            container: "us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build:latest",
            pretty_name: "XLA Linux x86 CPU 16 vcpu Presubmit",
          },
          {
            pool: "arc-linux-arm64-c4a-64-dev", #"linux-arm64-c4a-16",
            container: "us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build-arm64:latest",
            pretty_name: "XLA Linux ARM64 CPU 16 vcpu Presubmit",
          },
          {
            pool: "linux-x86-n2-128",
            container: "us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build:latest",
            pretty_name: "XLA Linux x86 CPU 128 vcpu Presubmit",
          }
        ]
    name: ${{ matrix.job_info.pretty_name }}
    runs-on: ${{ matrix.job_info.pool }}
    container: ${{ matrix.job_info.container }}
    defaults:
      run:
        shell: bash
    timeout-minutes: 540
    steps:
      - name: Print machine specs
        run: |
          lscpu
          free -h  # Memory information
          df -h    # Disk space information
          uname -a # Kernel information

      - name: Checkout OpenXLA
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: "Run build.py"
        run: |
          pwd
          ./build_tools/ci/build.py --build="${{ matrix.job_info.pretty_name }}_github_actions"

      - name: Bazel Info
        id: bazel-info
        run: |
          echo "Running bazel info:"
          bazel info
          echo "output_base=$(bazel info output_base)" >> $GITHUB_OUTPUT
        working-directory: xla #Run Bazel info inside the checked out directory

      - name: Get Executable Path with Bazel Query
        id: get-binary-path
        run: |
          # Directly query for the location of the binary with the correct Bazel output
          # We look for attribute "outs", attribute "executable", output with just file name.
          executable_path=$(bazel query 'attr(outs, //xla/tools:run_hlo_module, executable)'  --output=location | tr -d \')

          if [[ -n "$executable_path" ]]; then
              echo "Found executable path: $executable_path"
              echo "::set-output name=binary_path::$executable_path"
          else
              echo "Executable not found using bazel query"
              exit 1
          fi
        working-directory: xla

      - name: Verify Binary Existence
        run: |
          binary_path="${{ steps.get-binary-path.outputs.binary_path }}"
          if [[ -x "$binary_path" ]]; then
            echo "Binary exists and is executable: $binary_path"
          else
            echo "Error: Binary not found or is not executable at: $binary_path"
            exit 1
          fi
      # - name: Run xla/tests/fuzz/rand_000001.hlo and collect runtime and compile time
      #   run: ./bazel-bin/xla/tools/run_hlo_module --input_format=hlo --platform=CPU xla/tests/fuzz/rand_000001.hlo

